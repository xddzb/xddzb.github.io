<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>日常实习面试准备</title>
    <link href="/2023/02/23/%E6%97%A5%E5%B8%B8%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/"/>
    <url>/2023/02/23/%E6%97%A5%E5%B8%B8%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/</url>
    
    <content type="html"><![CDATA[<p>本篇博客记录遇到的一些个人认为有比较大概率被问到的知识点</p><span id="more"></span><h1 id="c-面试准备"><a href="#c-面试准备" class="headerlink" title="c++面试准备"></a>c++面试准备</h1><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><ol><li>git pull和git fetch 区别</li></ol><p><img src="/../img/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/e0eab2b33e85ea5f5e5c2aa3fd5fcf69.png" alt="img"></p><p><code>git fetch</code>是将远程主机的最新内容拉到本地，用户在检查了以后决定是否合并到工作本机分支中。</p><p>而<code>git pull</code> 则是将远程主机的最新内容拉下来后直接合并，即：<code>git pull = git fetch + git merge</code>，这样可能会产生冲突，需要手动解决。</p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><p>隔离级别（了解一下快照隔离）</p><p>索引</p><h3 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h3><p>过期删除策略</p><p>哨兵</p><h2 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h2><p>信号</p>]]></content>
    
    
    
    <tags>
      
      <tag>常识</tag>
      
      <tag>面试准备</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cookie Session Jwt</title>
    <link href="/2023/02/21/Session%E3%80%81Cookie%E3%80%81Token/"/>
    <url>/2023/02/21/Session%E3%80%81Cookie%E3%80%81Token/</url>
    
    <content type="html"><![CDATA[<p>Session  jwt(json with token) 是什么 以及他们两个直接的区别和联系</p><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="http"><a href="#http" class="headerlink" title="http"></a>http</h3><p>HTTP是一种无状态协议，同一用户对同一站点进行多次请求对于服务器来说都是新的。Session jwt的出现都是为了保持用户的登录状态，让用户在登录之后的一段时间，在该站点进行任何操作都不需要再次登录。</p><h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><p>cookie是一段不超过4KB的小型文本数据，由一个名称（Name）、一个值（Value）和其它几个用于控制Cookie有效期、安全性、使用范围的可选属性组成。cookie存储在浏览器中，会伴随浏览器的请求发送给服务器端，cookie可以用于存储session和jwt信息。</p><p><img src="/../img/Session%E3%80%81Cookie%E3%80%81Token/image-20230223190841087.png" alt="浏览b站视频时的cookie"></p><p>在浏览器中按下F12键可以查看cookie值，如上图所示，可以看到这个cookie中包含了很多关于userid和video的信息等用户的登录状态。</p><p>cookie有被用户篡改或者被非法用户非法截获的可能性，面对诸如此类的攻击手段，可以从服务器端对Cookie进行安全设计，保护措施主要有:（1 ）将mac等客户端网络地址信息加入cookie;（2）对cookie内容进行签字加密，加强有效性验证;（3）对Cookie本身进行随机密钥加密，降低被获取密钥的风险。</p><h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><p>session是服务器端为了记住用户而创建的对象。</p><p>用户第一次登录时，服务器会创建一个session对象和一个与之绑定的sessionid，并将sessionid发送给客户端。</p><p>浏览器将sessionid存储在cookie中，在之后的用户访问中，浏览器会将sessionid发送给服务器，服务器根据sessionid实现用户状态管理。</p><p>当有多台服务器时，必须要考虑将session信息在多台服务器之间共享。一种方式是将session信息存储在数据库等数据持久层中，但是当持久层出问题时影响很大。另一种方式就是服务器索性不保存 session 数据了，所有数据都保存在客户端，每次请求都发回服务器，jwt（json web token）是其中一种方案。</p><h2 id="jwt"><a href="#jwt" class="headerlink" title="jwt"></a>jwt</h2><p>JSON Web Token（缩写 JWT）是目前最流行的跨域认证解决方案</p><p><img src="/../img/Session%E3%80%81Cookie%E3%80%81Token/bg2018072301.jpg" alt="img"></p><p>JWT 的原理是，服务器认证以后，生成一个 JSON 对象，发回给用户，就像下面这样。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;姓名&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;张三&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;角色&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;管理员&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;到期时间&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2018年7月1日0点0分&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>以后，用户与服务端通信的时候，都要发回这个 JSON 对象。服务器完全只靠这个对象认定用户身份。为了防止用户篡改数据，服务器在生成这个对象的时候，会加上签名（详见后文）。</p><p>服务器就不保存任何 session 数据了，也就是说，服务器变成无状态了，从而比较容易实现扩展。</p><h3 id="jwt的数据结构"><a href="#jwt的数据结构" class="headerlink" title="jwt的数据结构"></a>jwt的数据结构</h3><p>实际的 JWT 大概就像下面这样。</p><p><img src="/../img/Session%E3%80%81Cookie%E3%80%81Token/bg2018072304.jpg" alt="img"></p><p>它是一个很长的字符串，中间用点（<code>.</code>）分隔成三个部分。注意，JWT 内部是没有换行的，这里只是为了便于展示，将它写成了几行。</p><p>JWT 的三个部分依次如下。</p><ul><li><p>Header（头部）</p></li><li><p>Payload（负载）</p></li><li><p>Signature（签名）</p></li></ul><p>写成一行，就是下面的样子。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Header</span>.Payload.Signature<br></code></pre></td></tr></table></figure><p><img src="/../img/Session%E3%80%81Cookie%E3%80%81Token/bg2018072303.jpg" alt="img"></p><h3 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h3><p>Header 部分是一个 JSON 对象，描述 JWT 的元数据，通常是下面的样子。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;alg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;HS256&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;typ&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;JWT&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>上面代码中，<code>alg</code>属性表示签名的算法（algorithm），默认是 HMAC SHA256（写成 HS256）；<code>typ</code>属性表示这个令牌（token）的类型（type），JWT 令牌统一写为<code>JWT</code>。</p><p>最后，将上面的 JSON 对象使用 Base64URL 算法（详见后文）转成字符串。</p><h3 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h3><p>Payload 部分也是一个 JSON 对象，用来存放实际需要传递的数据。JWT 规定了7个官方字段，供选用。</p><ul><li><p>iss (issuer)：签发人</p></li><li><p>exp (expiration time)：过期时间</p></li><li><p>sub (subject)：主题</p></li><li><p>aud (audience)：受众</p></li><li><p>nbf (Not Before)：生效时间</p></li><li><p>iat (Issued At)：签发时间</p></li><li><p>jti (JWT ID)：编号</p></li></ul><p>除了官方字段，你还可以在这个部分定义私有字段，下面就是一个例子。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;sub&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1234567890&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;John Doe&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;admin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>注意，JWT 默认是不加密的，任何人都可以读到，所以不要把秘密信息放在这个部分。</p><p>这个 JSON 对象也要使用 Base64URL 算法转成字符串。</p><h3 id="Signature"><a href="#Signature" class="headerlink" title="Signature"></a>Signature</h3><p>Signature 部分是对前两部分的签名，防止数据篡改。</p><p>首先，需要指定一个密钥（secret）。这个密钥只有服务器才知道，不能泄露给用户。然后，使用 Header 里面指定的签名算法（默认是 HMAC SHA256），按照下面的公式产生签名。</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tex">HMACSHA256(<br>  base64UrlEncode(header) + &quot;.&quot; +<br>  base64UrlEncode(payload),<br>  secret)<br></code></pre></td></tr></table></figure><p>算出签名以后，把 Header、Payload、Signature 三个部分拼成一个字符串，每个部分之间用”点”（<code>.</code>）分隔，就可以返回给用户。</p><h3 id="Base64URL"><a href="#Base64URL" class="headerlink" title="Base64URL"></a>Base64URL</h3><p>前面提到，Header 和 Payload 串型化的算法是 Base64URL。这个算法跟 Base64 算法基本类似，但有一些小的不同。</p><p>JWT 作为一个令牌（token），有些场合可能会放到 URL（比如 api.example.com&#x2F;?token&#x3D;xxx）。Base64 有三个字符<code>+</code>、<code>/</code>和<code>=</code>，在 URL 里面有特殊含义，所以要被替换掉：<code>=</code>被省略、<code>+</code>替换成<code>-</code>，<code>/</code>替换成<code>_</code> 。这就是 Base64URL 算法。</p><p>客户端收到服务器返回的 JWT，可以储存在 Cookie 里面，也可以储存在 localStorage。</p><p>此后，客户端每次与服务器通信，都要带上这个 JWT。你可以把它放在 Cookie 里面自动发送，但是这样不能跨域，所以更好的做法是放在 HTTP 请求的头信息<code>Authorization</code>字段里面。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">Authorization: Bearer <span class="hljs-tag">&lt;<span class="hljs-name">token</span>&gt;</span><br></code></pre></td></tr></table></figure><p>另一种做法是，跨域的时候，JWT 就放在 POST 请求的数据体里面。</p><h3 id="jwt特点"><a href="#jwt特点" class="headerlink" title="jwt特点"></a>jwt特点</h3><p>（1）JWT 默认是不加密，但也是可以加密的。生成原始 Token 以后，可以用密钥再加密一次。</p><p>（2）JWT 不加密的情况下，不能将秘密数据写入 JWT。</p><p>（3）JWT 不仅可以用于认证，也可以用于交换信息。有效使用 JWT，可以降低服务器查询数据库的次数。</p><p>（4）JWT 的最大缺点是，由于服务器不保存 session 状态，因此无法在使用过程中废止某个 token，或者更改 token 的权限。也就是说，一旦 JWT 签发了，在到期之前就会始终有效，除非服务器部署额外的逻辑。</p><p>（5）JWT 本身包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限。为了减少盗用，JWT 的有效期应该设置得比较短。对于一些比较重要的权限，使用时应该再次对用户进行认证。</p><p>（6）为了减少盗用，JWT 不应该使用 HTTP 协议明码传输，要使用 HTTPS 协议传输。</p><p><strong>参考博客：</strong></p><p><a href="https://cloud.tencent.com/developer/article/1704064">Session、Cookie、Token 【浅谈三者之间的那点事】 - 腾讯云开发者社区-腾讯云 (tencent.com)</a></p><p><a href="https://ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html">JSON Web Token 入门教程 - 阮一峰的网络日志 (ruanyifeng.com)</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>常识</tag>
      
      <tag>青训营</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉树模板题总结</title>
    <link href="/2023/02/21/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%A8%A1%E6%9D%BF%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <url>/2023/02/21/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%A8%A1%E6%9D%BF%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>二叉树递归遍历、迭代遍历(前序 中序 后序)及c++中的set map</p><span id="more"></span>]]></content>
    
    
    
    <tags>
      
      <tag>剑指offer</tag>
      
      <tag>算法刷题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>青训营项目--极简版抖音总结</title>
    <link href="/2023/02/20/%E9%9D%92%E8%AE%AD%E8%90%A5%E9%A1%B9%E7%9B%AE--%E6%9E%81%E7%AE%80%E7%89%88%E6%8A%96%E9%9F%B3%E6%80%BB%E7%BB%93/"/>
    <url>/2023/02/20/%E9%9D%92%E8%AE%AD%E8%90%A5%E9%A1%B9%E7%9B%AE--%E6%9E%81%E7%AE%80%E7%89%88%E6%8A%96%E9%9F%B3%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>采用 MVC 结构，使用 Gin 作为 Web 框架，Redis 作为缓存框架，MySQL 作为持久层框架。</p><span id="more"></span><h1 id="项目开发介绍"><a href="#项目开发介绍" class="headerlink" title="项目开发介绍"></a>项目开发介绍</h1><h2 id="团队分工"><a href="#团队分工" class="headerlink" title="团队分工"></a>团队分工</h2><p>小组一共七个人，可能年后大家都比较忙，只有我一人参与实际开发。</p><h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h2><p>本项目是第五届字节跳动青训营后端基础班大作业，在该项目之前只实现过简单的接口服务器，没有接触过golang，因此在实现的过程中借鉴了一些往届优秀作品。本项目采用 MVC 分层设计模型分离模型层、视图层和控制层，从而降低代码的耦合度，提高项目的可维护性。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">       ┌─────────┐      ┌─────────┐      ┌─────────┐<br>──req──►         ├──────►         ├──────►         │<br>       │   <span class="hljs-built_in">Gin</span>   │      │  Redis  │      │  MySQL  │<br>◄─resp─┤         ◄──────┤         ◄──────┤         │<br>       └─────────┘      └─────────┘      └─────────┘<br></code></pre></td></tr></table></figure><p>极简版抖音项目划分为两大方向，互动方向和社交方向，两个方向均包含基础功能内容，在扩展功能上有所不同，具体内容如下：</p><ul><li>视频：视频推送、视频投稿、发布列表</li><li>用户：用户注册、用户登录、用户信息</li><li>点赞：点赞操作、点赞列表</li><li>评论：评论操作、评论列表</li><li>关注：关注操作、关注列表、粉丝列表</li><li>消息：聊天操作(暂未实现)</li></ul><h2 id="技术速览"><a href="#技术速览" class="headerlink" title="技术速览"></a>技术速览</h2><h3 id="1-使用redis加速点赞和关注过程"><a href="#1-使用redis加速点赞和关注过程" class="headerlink" title="1. 使用redis加速点赞和关注过程"></a>1. 使用redis加速点赞和关注过程</h3><p>简单分析抖声项目可知，整个抖声app，点赞和关注是很明显的性能热点。</p><p>为此我将点赞和关注对数据库的变化用redis来做一些数据的缓存，比如该视频是否被点赞以及该用户是否被关注等等过程。</p><h3 id="2-使用gorm建表"><a href="#2-使用gorm建表" class="headerlink" title="2. 使用gorm建表"></a>2. 使用gorm建表</h3><p>数据库需要额外建立中间表实现多对多关系，gorm可以自动给多对多关系建立中间表，只需要互相持有对方的切片类型，然后再指定<strong>many2many</strong>字段即可。</p><p><img src="/../img/%E9%9D%92%E8%AE%AD%E8%90%A5%E9%A1%B9%E7%9B%AE--%E6%9E%81%E7%AE%80%E7%89%88%E6%8A%96%E9%9F%B3%E6%80%BB%E7%BB%93/image-20230220165140537.png" alt="image-20230220165140537"></p><h3 id="3-gin框架中间件复用代码"><a href="#3-gin框架中间件复用代码" class="headerlink" title="3. gin框架中间件复用代码"></a>3. gin框架中间件复用代码</h3><p>使用gin框架的中间件实现 JWT鉴权、密码加密存储和userId的解析验证。具体有以下中间件：</p><ul><li><em>JWTMidWare：从JWT中解析出user_id</em></li><li><em>SHAMiddleWare：使用SHA1算法加密密码</em></li><li><em>UserIdVerify：解析并验证user_id</em></li></ul><h3 id="4-安全防御措施"><a href="#4-安全防御措施" class="headerlink" title="4. 安全防御措施"></a>4. 安全防御措施</h3><p>具体措施主要有以下几点：</p><ul><li>规范使用gorm操作sql语句，可<strong>防止sql注入</strong>。</li><li>用户密码进行<strong>SHA1加密</strong>，这个过程设置在中间件中。</li><li>使用<strong>JWT用户鉴权</strong>，并加入到中间件过程中。</li><li>文件<strong>合法性检验</strong>，主要是对视频的文件格式是否支持的校验。</li><li>保持文件的<strong>唯一性</strong>，主要保持每次上传文件名称的唯一性，通过用户id和用户上传的视频数量进行捆绑得到一个唯一的文件名称。</li><li>所有的参数均在<strong>service层</strong>的第一个阶段完成校验。</li></ul><h3 id="5-ffmpeg切片得到封面"><a href="#5-ffmpeg切片得到封面" class="headerlink" title="5. ffmpeg切片得到封面"></a>5. ffmpeg切片得到封面</h3><p>首先应安装ffmpeg，并添加到系统路径。我使用ffmpeg-go从视频中截取封面的函数<strong>GetSnapshot</strong>，添加ffmpeg-go依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">go get github.com/u2takey/ffmpeg-go<br></code></pre></td></tr></table></figure><p>GetSnapshot函数默认生成格式未jpg的封面图片，该函数有三个参数：</p><ul><li>videoPath: 视频文件地址</li><li>snapshotPath: 生成图片的地址</li><li>frameNum: 获取第几帧</li></ul><h3 id="6-高度定制化的配置"><a href="#6-高度定制化的配置" class="headerlink" title="6. 高度定制化的配置"></a>6. 高度定制化的配置</h3><p>整个项目的环境依赖的配置均通过config文件夹里面的config.toml文件进行管理，这样增加了环境配置的灵活性，配置如下，注释也写的很清楚。</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-comment">#关系型数据库配置</span><br><span class="hljs-section">[mysql]</span><br><span class="hljs-attr">host</span> = <span class="hljs-string">&quot;127.0.0.1&quot;</span><br><span class="hljs-attr">port</span> = <span class="hljs-number">3306</span><br><span class="hljs-attr">database</span> = <span class="hljs-string">&quot;dousheng&quot;</span><br><span class="hljs-attr">username</span> = <span class="hljs-string">&quot;root&quot;</span><br><span class="hljs-attr">password</span> = <span class="hljs-string">&quot;******&quot;</span><br><span class="hljs-attr">charset</span> = <span class="hljs-string">&quot;utf8&quot;</span><br><span class="hljs-attr">parse_time</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">loc</span> = <span class="hljs-string">&quot;Local&quot;</span><br><br><span class="hljs-comment">#nosql配置</span><br><span class="hljs-section">[redis]</span><br><span class="hljs-attr">host</span> = <span class="hljs-string">&quot;127.0.0.1&quot;</span><br><span class="hljs-attr">port</span> = <span class="hljs-number">6379</span><br><span class="hljs-attr">database</span> = <span class="hljs-number">0</span><br><br><span class="hljs-comment">#记录当前服务器的ip和启动端口号，当前服务器的ip用于生成对应的视频链接地址</span><br><span class="hljs-section">[server]</span><br><span class="hljs-attr">ip</span> = <span class="hljs-string">&quot;******&quot;</span><br><span class="hljs-attr">port</span> = <span class="hljs-number">8087</span><br></code></pre></td></tr></table></figure><h2 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h2><h3 id="1-架构说明"><a href="#1-架构说明" class="headerlink" title="1.  架构说明"></a>1.  架构说明</h3><p><img src="/img/%E9%9D%92%E8%AE%AD%E8%90%A5%E9%A1%B9%E7%9B%AE--%E6%9E%81%E7%AE%80%E7%89%88%E6%8A%96%E9%9F%B3%E6%80%BB%E7%BB%93/%E9%9D%92%E8%AE%AD%E8%90%A5%E5%A4%A7%E4%BD%9C%E4%B8%9A%E6%9E%B6%E6%9E%84%E8%AF%B4%E6%98%8E.jpg" alt="青训营大作业架构说明"></p><blockquote><p>以用户登录模块为例共需要经过以下过程</p></blockquote><ol><li>进入中间件JWTMidWare内的函数逻辑，得到password明文加密后再设置password。具体需要调用gin.Context的Set方法设置password。随后调用next()方法继续下层路由。</li><li>进入UserLoginHandler函数逻辑，获取username，并调用gin.Context的Get方法得到中间件设置的password。再调用service层的QueryUserLogin函数。</li><li>进入QueryUserLogin函数逻辑，执行三个过程：checkNum，prepareData，packData。也就是检查参数、准备数据、打包数据，准备数据的过程中会调用models层的UserLoginDAO。</li><li>进入UserLoginDAO的逻辑，执行最终的数据库请求过程，返回给上层。</li></ol><h3 id="2-数据库说明"><a href="#2-数据库说明" class="headerlink" title="2.  数据库说明"></a>2.  数据库说明</h3><h3 id="3-遇到的问题"><a href="#3-遇到的问题" class="headerlink" title="3.  遇到的问题"></a>3.  遇到的问题</h3><h3 id="4-可改进的地方"><a href="#4-可改进的地方" class="headerlink" title="4. 可改进的地方"></a>4. 可改进的地方</h3><ol><li>很多执行逻辑可以通过并行优化。</li><li>未增加日志系统。</li><li>未用到集群、微服务等架构。</li><li>未使用对象存储来进行视频的存储。</li><li>密码的加密没有进行加盐处理。</li><li>使用gorm时，使用了原始的sql命令。</li></ol><h3 id="5-项目运行"><a href="#5-项目运行" class="headerlink" title="5.  项目运行"></a>5.  项目运行</h3><blockquote><p>本项目运行不需要手动建表，项目启动后会自动建表。</p></blockquote><p>运行所需环境：</p><ul><li>mysql 5.7及以上</li><li>redis 5.0.14及以上</li><li>ffmepg（已放入lib自带，用于对视频切片得到封面</li><li>需要gcc环境（主要用于cgo，windows请将mingw-w64设置到环境变量</li></ul><p>运行需要更改配置：</p><blockquote><p>进入config目录更改对应的mysql、redis、server、path信息。</p></blockquote><ul><li>mysql：mysql相关的配置信息</li><li>redis：redis相关配置信息</li><li>server：当前服务器（当前启动的机器）的配置信息，用于生成对应的视频和图片链接</li><li>path：其中ffmpeg_path为lib里的文件路径，static_source_path为本项目的static目录，这里请根据本地的绝对路径进行更改</li></ul><blockquote><p>完成config配置文件的更改后，需要再更改conf.go里的解析文件路径为config.toml文件的绝对路径，内容如下：</p><p> if _, err :&#x3D; toml.DecodeFile(“你的绝对路径\config.toml”, &amp;Info); err !&#x3D; nil {         panic(err)     }</p></blockquote><p>运行所需命令：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">cd .\byte_douyin_project\<br><span class="hljs-keyword">go</span> run main.<span class="hljs-keyword">go</span><br></code></pre></td></tr></table></figure><h1 id="个人收获"><a href="#个人收获" class="headerlink" title="个人收获"></a>个人收获</h1><p>由于第一次接触到这类项目，本科期间主要做的前端后端只做过简单的API服务器，所以有很多东西之前没有接触过，这次的项目可以说是边学习边coding的过程，阅读往届优秀作品的源码也让我受益良多。</p><ol><li>学会对整个项目进行MVC分层处理。</li><li>学会以更合理的方式组织代码（项目结构划分 函数名规范等），提高代码可读性。</li><li>学会使用gin框架，使用gin框架实现路由分发。</li><li>学会使用gorm框架，该框架可以自动完成整个建表过程，按照规范使用gorm能够防止sql注入。</li><li>学会使用JWT鉴权，并利用gin框架提供的中间件实现鉴权模块。</li><li>学会MySQL中的多对多关系映射以及一对多等等关系的映射。</li><li>学会Redis的使用。</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>青训营</tag>
      
      <tag>golang</tag>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux c++调试</title>
    <link href="/2023/02/20/linuxc++%E8%B0%83%E8%AF%95/"/>
    <url>/2023/02/20/linuxc++%E8%B0%83%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<p>选择恰当的工具和方法，让 GDB 调试效率成倍的提升并没有任何问题。当然，前提条件是你至少会在使用最原始的 GDB。</p><h2 id="裸奔状态：原始的-GDB-命令行"><a href="#裸奔状态：原始的-GDB-命令行" class="headerlink" title="裸奔状态：原始的 GDB 命令行"></a>裸奔状态：原始的 GDB 命令行</h2><p>穿上各种衣服前，至少得先学会裸奔，找份简单的 GDB cheat sheet 对照一下：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/cc51d024cb0d2472ee2cf4f5ee39f0a6.jpeg" alt="图片"></p><p>生产环境中出现崩溃时，因线上服务器一般没有开发环境，也无配套源代码，所以程序崩溃后，如果你懒得把 core 文件拖回到开发机检查，可以先在线上服务器先简单gdb看一下。</p><p>GDB命令密密麻麻，常用的也就表格上那几条，比如进去以后第一步先用 bt 查看一下调用栈，info local查看一下本地变量，再配合 up&#x2F;down 在整个调用栈的不同层次之间上下移动一下，检查各处局部变量的值，print 一下某个表达式，即便没代码，看下符号和反汇编，一般也能调试个七七八八。</p><p>碰到复杂点的 BUG，必须配合源代码了，那你得把 core 文件拉到开发环境中，再用 gdb 对照源代码调试，配合 list [行号] 指令查看当前运行的源代码，再配合其他方法进行调试。</p><p>那么这时候，如果调试复杂度继续上升，你需要不断的断点，每次 next &#x2F; step 单步完后你都需要 list 一下前后源代码，或者用 disassemble [函数名&#x2F;地址] 查看一下指令的话，不少人会感觉到抓狂，这时我们需要给裸奔的 GDB 穿条内裤了。</p><h2 id="穿上内裤的-GDB-TUI"><a href="#穿上内裤的-GDB-TUI" class="headerlink" title="穿上内裤的 GDB - TUI"></a>穿上内裤的 GDB - TUI</h2><p>这是 gdb 自带的文本界面，使用 gdb -tui 命令启动，比如：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">gdb -tui hello</span><br></code></pre></td></tr></table></figure><p>即可打开我们的文本界面：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/622be5846fb60f98912fcadacea26b26.png" alt="图片"></p><p>上方是源代码窗口，下面是 gdb 终端，窗口管理快捷键模仿 emacs，使用 c-x o 进行窗口切换，如果你还想查看指令窗口，可以输入：layout split</p><p><img src="https://img-blog.csdnimg.cn/img_convert/5d318df179b37dbb9fc6b778a7d19282.jpeg" alt="图片"></p><p>然后你单步的时候上面的源代码窗口会跟着滚动，比之前不停的 list 方便不少吧，要看前后源代码可以继续 c-x o 切换窗口后上下滚动。</p><p>有时候你 up&#x2F;down 切换了栈帧后，上面的代码也许来不及更新，那么你用 update 指令，让上面的代码窗口定位到你最新的执行位置，有时也需要 CTRL-L 重绘下整个界面。</p><p>在 gdb 自带的 tui 模式中，你不但可以随时查看代码&#x2F;指令，还可以查看寄存器。好吧，其实 gdb再简陋，本身还是配套了一条内裤的，只是很多人忘记拿出来穿了。</p><h2 id="穿上内衣：gdbinit"><a href="#穿上内衣：gdbinit" class="headerlink" title="穿上内衣：gdbinit"></a>穿上内衣：gdbinit</h2><p>如果上述文本 TUI的信息不够丰富的话，也许你会对 .gdbinit 感兴趣，~&#x2F;.gdbinit 是一个 gdb配置脚本，可以设定一些由 python 编写的插件，比如 peda：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/f575063c037f58a5aba7815703b09788.png" alt="图片"></p><p>在 ~&#x2F;.gdbinit 上面配置了 peda 后，可以看到命令提示符就从 (gdb) 变成了 gdb-peda$ 。每敲一个单步命令，peda 都会显示出无比丰富的信息，你还可以配置添加更多，配合高亮，你可以得到一个加强版的命令行。</p><p>不过这个我用的并不多，因为它会影响 TUI 模式的界面，我不喜欢在我的 gdb 里搞太多乱七八糟的东西。同时，当我们的调试需求继续变得更加复杂，你要不停的断点，频繁的单步，这些传统命令行里不停的输入各种指令显然已经让我们疲惫不堪了，能否直接在界面上查看源代码并且直接在代码上快捷键断点，快捷键单步呢？</p><p>可以啊，试试 cgdb。</p><h2 id="穿上外套的-GDB：cgdb"><a href="#穿上外套的-GDB：cgdb" class="headerlink" title="穿上外套的 GDB：cgdb"></a>穿上外套的 GDB：cgdb</h2><p>CGDB 类似 gdb tui 分为终端窗口和代码窗口：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/19ede4df990f962d133c843e5a40780a.jpeg" alt="图片"></p><p>上面的代码窗口称为 cgdb mode, 下面的 gdb 窗口称为 gdb mode，调试就是不停的在两种模式间切换，按键模仿 vim，按 ESC 切换回 cgdb 模式，按 i 切换到 gdb 模式。</p><p>这看起来和 TUI gdb 差不多啊？除了语法高亮外它比 gdb tui 高效在哪里呢？答案是：大部分操作皆可在 cgdb mode 下（即源代码窗口）用快捷键操作。</p><p>方向键 或者 hjkl 移动光标，page-down&#x2F;up 或 c-f &#x2F; c-b 前后翻页，按 o键会列出当前可执行文件的源代码列表，可以切换查看其他相关代码文件，按 &#x2F; 或者 ？可以进行文档搜索。</p><p>上面这些快捷键基本和 vim 对应，能让你方便的浏览源代码，同时在代码窗口可以用空格键来切换断点，还有其他一些快捷键：</p><ul><li>F5 - Send a run command to GDB.</li><li>F6 - Send a continue command to GDB.</li><li>F7 - Send a finish command to GDB.</li><li>F8 - Send a next command to GDB.</li><li>F10 - Send a step command to GDB.</li></ul><p>更多快捷键见【这里】，这下单步和断点比原来轻松多啦，你基本可以呆在源代码窗口里不出来，大部分时候不用再到 gdb 命令行里一条条 next&#x2F;step 的输入了。</p><p>编辑一下 ~&#x2F;.cgdb&#x2F;cgdbrc ，简单调教下使用更方便：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> ignorecase<br><span class="hljs-built_in">set</span> <span class="hljs-attribute">ts</span>=4<br><span class="hljs-built_in">set</span> <span class="hljs-attribute">wso</span>=vertical<br><span class="hljs-built_in">set</span> <span class="hljs-attribute">eld</span>=shortarrow<br><span class="hljs-built_in">set</span> hls<br>map &lt;F9&gt; :until&lt;cr&gt;<br></code></pre></td></tr></table></figure><p>这里大概设置了搜索大小写不敏感，tab 大小，分屏方式（默认改为左右分屏），搜索高亮，以及加了一个 F9 的快捷键，用于跳出循环（默认没有这个快捷键）：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/63887f2f23747b820d74536020a3d305.jpeg" alt="图片"></p><p>现在大家都是宽屏显示器了，默认改成左右分屏（要 cgdb 7.0才支持）舒服不少。</p><p>cgdb 还有更多功能，比如没有源文件时可以查看汇编，或者交叉查看源代码和汇编，设置 mark 等等，具体见它的官方文档吧。</p><p>这个小工具能将你从大量 gdb 命令行中解脱出来，配置文件还可以让你按喜好绑定各种命令到快捷键上。</p><h2 id="穿戴整齐：Emacs-GDB"><a href="#穿戴整齐：Emacs-GDB" class="headerlink" title="穿戴整齐：Emacs GDB"></a>穿戴整齐：Emacs GDB</h2><p>CGDB 虽然大部分操作可以用快捷键进行，但是仍然有不少时候需要切换回右边的 gdb mode 中去敲命令，比如当你需要每单步一次就用 info local 查看一下局部变量或者 print 一下某个全局变量的值的时候，频繁的左右切换会让你疲于奔命。</p><p>所有在调试一些相对复杂的问题时，上面这些工具 hold 不住了，作用平时 Vim 写代码的人，我也从不拒绝用 emacs 的 gdb mode 来调试一些复杂问题，毫无疑问 emacs 是目前终端下最强的 GDB 前端。</p><p>从来没用过 emacs 都没关系，只要安装一个 emacs 记得下面几条命令就可以调试了：</p><ul><li>切换文件：c-x c-f （先按 ctrl_x 再按 ctrl_f），输入文件名时可以用 tab 补全</li><li>移动光标：方向键，或者 c-f, c-b, c-p, c-n；翻页 pgup&#x2F;down 或者 c-v &#x2F; m-v</li><li>切换缓存：c-x b 切换当前窗口里的缓存，c-x c-b 打开新窗口切换缓存。</li><li>窗口操作：c-x o 窗口切换，c-x 2 &#x2F; c-x 3 上下&#x2F;左右分屏，c-x 0 &#x2F; c-x 1 关闭 &#x2F; 独占</li><li>输入命令：m-x （按 ALT_x）输入命令可以用 tab 补全，c-g 退出命令输入。</li></ul><p>当然，别忘记退出命令是 c-x c-c，这就够了，首先我们启动 emacs：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/ee6d4f58f8f271ec1378bef5d2f243e6.jpeg" alt="图片"></p><p>按下 m-x （alt+x），提示输入命令（如果终端软件 alt 键不灵，那可以设置一下终端软件，或者一秒内先按 ESC，再按 x键，在 xterm 终端下是等价的），键入 “gdb”敲回车：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/2636e4331765748478c47ab87ea46987.jpeg" alt="图片"></p><p>下面会问你怎么运行gdb，输入gdb的 shell 启动命令行回车后开始 gdb 模式：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/cf04aaa2d696113f4fb53468bc8f4b33.jpeg" alt="图片"></p><p>看到这里也许你会问，这和直接命令行 gdb 有区别么？别急，继续 m-x 输入命令：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">gdb-many-windows</span><br></code></pre></td></tr></table></figure><p>马上满足你：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/672464d3c8be200e20e4aa93bf5baf35.jpeg" alt="图片"></p><p>左上是 GDB 终端，从上到下分别是：GDB终端，本地变量监控，源代码，程序输出，栈帧，断点列表。</p><p>当然你可以接着在 gdb 终端里输入你想要的指令，但大部分时候我们会在源代码窗口工作，使用 c-x o 将窗口定位到源代码窗口，使用下面命令或者对应快捷键进行操作：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/19e968d1763445a257d958024de3220c.png" alt="图片"></p><p>这些 gud- 开头的命令都是 emacs gdb-mode 下通用调试器的操作命令，他们和 gdb 命令一一对应，可以用 m-x 输入这些命令，还可以直接用快捷键操作。</p><p>如果你想把某个窗口替换成反汇编或者寄存器的监控，那么可以用 m-x 输入：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">gdb-display-disassembly-buffer<br></code></pre></td></tr></table></figure><p>那么其中一个窗口就会被切换成反汇编窗口：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/0caae37a6e699f9a49fd4660f9636adb.jpeg" alt="图片"></p><p>左上角的 gdb 终端被切换成反汇编窗口了，看完后记得 c-x b 切换回 gdb 控制台，如果你要避免某个窗口被切换走可以搜索 emacs 的 dedicated window。再者，我们可以自己用窗口管理快捷键按照我们的喜好拆分布局：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/bcc2887e1a15fff79589f5997579b961.jpeg" alt="图片"></p><p>比如重新拆分了一下，把 gdb 终端挪到右边，输出窗口下面，把原来显示 gdb 终端的地方显示为反汇编。基本上你在 IDE 上见得到的调试手段，在 emacs 中都可以操作，并且 emacs 还可以在 Windows 下用 gdb 调试 mingw 的程序。</p><p>那么也许你会抱怨 emacs 下操作是在太麻烦了，没关系，稍微调教一下即可。</p><h2 id="调教-emacs-gdb-mode"><a href="#调教-emacs-gdb-mode" class="headerlink" title="调教 emacs gdb-mode"></a>调教 emacs gdb-mode</h2><p>打开 ~&#x2F;.emacs （windows下是 ~&#x2F;_emacs）文件，输入如下内容：</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-name">global-set-key</span> [<span class="hljs-name">M-left</span>] <span class="hljs-symbol">&#x27;windmove-left</span>)<br>(<span class="hljs-name">global-set-key</span> [<span class="hljs-name">M-right</span>] <span class="hljs-symbol">&#x27;windmove-right</span>)<br>(<span class="hljs-name">global-set-key</span> [<span class="hljs-name">M-up</span>] <span class="hljs-symbol">&#x27;windmove-up</span>)<br>(<span class="hljs-name">global-set-key</span> [<span class="hljs-name">M-down</span>] <span class="hljs-symbol">&#x27;windmove-down</span>)<br><br>(<span class="hljs-name">global-set-key</span> [<span class="hljs-name">f5</span>] <span class="hljs-symbol">&#x27;gud-run</span>)<br>(<span class="hljs-name">global-set-key</span> [<span class="hljs-name">S-f5</span>] <span class="hljs-symbol">&#x27;gud-cont</span>)<br>(<span class="hljs-name">global-set-key</span> [<span class="hljs-name">f6</span>] <span class="hljs-symbol">&#x27;gud-jump</span>)<br>(<span class="hljs-name">global-set-key</span> [<span class="hljs-name">S-f6</span>] <span class="hljs-symbol">&#x27;gud-print</span>)<br>(<span class="hljs-name">global-set-key</span> [<span class="hljs-name">f7</span>] <span class="hljs-symbol">&#x27;gud-step</span>)<br>(<span class="hljs-name">global-set-key</span> [<span class="hljs-name">f8</span>] <span class="hljs-symbol">&#x27;gud-next</span>)<br>(<span class="hljs-name">global-set-key</span> [<span class="hljs-name">S-f7</span>] <span class="hljs-symbol">&#x27;gud-stepi</span>)<br>(<span class="hljs-name">global-set-key</span> [<span class="hljs-name">S-f8</span>] <span class="hljs-symbol">&#x27;gud-nexti</span>)<br>(<span class="hljs-name">global-set-key</span> [<span class="hljs-name">f9</span>] <span class="hljs-symbol">&#x27;gud-break</span>)<br>(<span class="hljs-name">global-set-key</span> [<span class="hljs-name">S-f9</span>] <span class="hljs-symbol">&#x27;gud-remove</span>)<br>(<span class="hljs-name">global-set-key</span> [<span class="hljs-name">f10</span>] <span class="hljs-symbol">&#x27;gud-until</span>)<br>(<span class="hljs-name">global-set-key</span> [<span class="hljs-name">S-f10</span>] <span class="hljs-symbol">&#x27;gud-finish</span>)<br><br>(<span class="hljs-name">global-set-key</span> [<span class="hljs-name">f4</span>] <span class="hljs-symbol">&#x27;gud-up</span>)<br>(<span class="hljs-name">global-set-key</span> [<span class="hljs-name">S-f4</span>] <span class="hljs-symbol">&#x27;gud-down</span>)<br><br>(<span class="hljs-name">setq</span> gdb-many-windows t)<br></code></pre></td></tr></table></figure><p>解释一下，最上面设定了 ALT + 方向键就可以在窗口中跳转，如果你终端 alt+方向不灵的话可以改成 C-left, C-right 等用 ctrl + 方向键移动窗口，后面设定了一些常用命令的快捷。</p><p>最后设置了默认打开 gdb-many-windows，最好增加下面一段，允许鼠标操作：</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-name"><span class="hljs-built_in">require</span></span> <span class="hljs-symbol">&#x27;xt-mouse</span>)<br>(<span class="hljs-name">xterm-mouse-mode</span>)<br>(<span class="hljs-name"><span class="hljs-built_in">require</span></span> <span class="hljs-symbol">&#x27;mouse</span>)<br>(<span class="hljs-name">xterm-mouse-mode</span> t)<br>(<span class="hljs-name">defun</span> track-mouse (<span class="hljs-name">e</span>))<br><br>(<span class="hljs-name">setq</span> mouse-wheel-follow-mouse <span class="hljs-symbol">&#x27;t</span>)<br><br>(<span class="hljs-name">defvar</span> alternating-scroll-down-next t)<br>(<span class="hljs-name">defvar</span> alternating-scroll-up-next t)<br><br>(<span class="hljs-name">defun</span> alternating-scroll-down-line ()<br>  (<span class="hljs-name">interactive</span> <span class="hljs-string">&quot;@&quot;</span>)<br>    (<span class="hljs-name"><span class="hljs-built_in">when</span></span> alternating-scroll-down-next<br>      (<span class="hljs-name">scroll-down-line</span>))<br>    (<span class="hljs-name">setq</span> alternating-scroll-down-next (<span class="hljs-name"><span class="hljs-built_in">not</span></span> alternating-scroll-down-next)))<br><br>(<span class="hljs-name">defun</span> alternating-scroll-up-line ()<br>  (<span class="hljs-name">interactive</span> <span class="hljs-string">&quot;@&quot;</span>)<br>    (<span class="hljs-name"><span class="hljs-built_in">when</span></span> alternating-scroll-up-next<br>      (<span class="hljs-name">scroll-up-line</span>))<br>    (<span class="hljs-name">setq</span> alternating-scroll-up-next (<span class="hljs-name"><span class="hljs-built_in">not</span></span> alternating-scroll-up-next)))<br><br>(<span class="hljs-name">global-set-key</span> (<span class="hljs-name">kbd</span> <span class="hljs-string">&quot;&lt;mouse-4&gt;&quot;</span>) <span class="hljs-symbol">&#x27;alternating-scroll-down-line</span>)<br>(<span class="hljs-name">global-set-key</span> (<span class="hljs-name">kbd</span> <span class="hljs-string">&quot;&lt;mouse-5&gt;&quot;</span>) <span class="hljs-symbol">&#x27;alternating-scroll-up-line</span>)<br></code></pre></td></tr></table></figure><p>这下 xterm 下你可以自用的用鼠标点击切换窗口，点击按钮，用滚轮上下查看源代码了：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/3922bd249009e4b4d36f8d28c0e394b6.jpeg" alt="图片"></p><p>这下自由多了，ALT+方向或者鼠标点击，直接窗口跳转，并且用下面的命令操作：</p><ul><li>F5 - 运行，Shift + F5 - 继续</li><li>F7&#x2F;F8 代码级单步， 以及 Shift-F7&#x2F;F8 指令级单步</li><li>F9 - 设置断点，Shift-F9 删除断点</li><li>F10 - 跳出循环，Shift-F10 跳出函数</li><li>F4 - 移动到上一个调用栈帧，Shift-F4移动到下一个</li></ul><p>右上角的本地变量窗口上面有两个按钮，可以鼠标点击切换显示本地变量还是寄存器。右下角的也有两个按钮切换显示断点还是线程。最上面绿色部分的按钮也可以直接鼠标点击。</p><p>终于比我们最初的版本好用多了，如果你喜欢折腾的话，你还可以定制 gdb-many-windows 的初始格局，比如更复杂的：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/39427f8350b7945d1d90108e6fefe8bf.jpeg" alt="图片"></p><p>彻底满足你各种复杂的调试需求，这里不展开了，有兴趣见【这篇文章】。</p><p>最后每次调试时打开 emacs, m-x输入 gdb 再键入文件名很麻烦？我们调教一下 .bashrc：</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">gdbtool</span> () &#123; <span class="hljs-string">emacs</span> <span class="hljs-built_in">--eval</span> <span class="hljs-string">&quot;(gdb \&quot;</span><span class="hljs-string">gdb</span> <span class="hljs-built_in">--annotate=3</span> -<span class="hljs-string">i</span>=<span class="hljs-string">mi</span> $*\<span class="hljs-string">&quot;)&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>好了，终端下我们对要调试的程序只需要输入：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>gdbtool hello<br></code></pre></td></tr></table></figure><p>就能自动打开 emacs 并且切换到 gdb-mode 下面，展开我们的多窗口，开始调试了，是不是很愉快？</p><p>我平时调试没环境会先使用 gdb-tui 先看看，有环境或者问题复杂了我会打开 emacs 来调试。后来</p><p>@zpan</p><p>给我介绍了 cgdb 以后，gdb-tui 就退役了，无环境先用 cgdb 看个大概，碰到复杂问题打开 emacs，经过一番调教，十分顺手。</p><h2 id="让-GDB-变得更性感一些"><a href="#让-GDB-变得更性感一些" class="headerlink" title="让 GDB 变得更性感一些"></a>让 GDB 变得更性感一些</h2><p>其实到 emacs 已经差不多了，但如果你实在记不住这有限的几个快捷键或者 gdb 命令，那么还可以尝试一下 gdbgui：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/324df5d6e12061b4f507dc12658d1d58.jpeg" alt="图片"></p><p>python 开发的基于浏览器的 GDB 前端，pip 安装一下即可，使用时：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">gdbgui</span> --host <span class="hljs-number">0.0.0.0</span> hello<br></code></pre></td></tr></table></figure><p>就会监听本地 5000 端口，这时我们可以用浏览器打开服务器上的地址完全用鼠标进行调试。</p><p>中间是程序代码，下面是 GDB终端，上面可以切换源代码，可以控制运行&#x2F;继续&#x2F;单步等。右边可以实时查看：本地变量，调用栈帧，内存地址，断点，线程 等等。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/b45df0c41a9bd621d17bf938c550152f.png" alt="图片"></p><p>比如上面的调用栈和线程查看，以及下面的自定义结构体查询：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/3609ac642112abc36a75e20930acb90a.png" alt="图片"></p><p>还能可视化查询数据结构：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/e7c63e2e0bb2fd34a4c864ff0200cebe.jpeg" alt="图片"></p><p>鼠标点击代码左边就可以设置&#x2F;删除断点，点击上面的按钮就能切换显示汇编代码。基本上把 GDB的主要功能都用可视化的方式，现代的网页界面展示在你的面前，不需要记住任何快捷键，鼠标点点点就可以了。</p><p>同时，这个 gdbgui 还支持 Windows 下的 gdb 调试。目前 gdbgui 还在活跃的开发中，作为最漂亮的 gdb 前端，相信它会越来越强大。</p><h2 id="回顾一下"><a href="#回顾一下" class="headerlink" title="回顾一下"></a>回顾一下</h2><p>好了我们经历了从最开始 gdb 的命令行裸奔状态到终端下最完善的调试环境 emacs gdb-mode，再到性感的 gdbgui。GDB 的好处就在于对内可以引入各种插件，对外可以提供各种接口，自己做好调试的事情，前端界面可以完全交给其他程序来主导，不管是本地还是远程，所以才会有了各种各样丰富的 GDB Front End，还有各种远程 GDB 工具。</p><p>它不会限制你说你只能这样调试，或者你只有唯一的一种 UI可以操作，所以 GDB 的组合方式千千万万，用不着一谈 GDB 就觉得只有原始的敲命令一种用法，对吧？上面么多用法，随便选两样，花不了半小时，即可让你终端下的调试工作加快不少。</p><blockquote><p><strong>来自：知乎，作者：韦易笑</strong></p></blockquote><p>奔状态到终端下最完善的调试环境 emacs gdb-mode，再到性感的 gdbgui。GDB 的好处就在于对内可以引入各种插件，对外可以提供各种接口，自己做好调试的事情，前端界面可以完全交给其他程序来主导，不管是本地还是远程，所以才会有了各种各样丰富的 GDB Front End，还有各种远程 GDB 工具。</p><p>它不会限制你说你只能这样调试，或者你只有唯一的一种 UI可以操作，所以 GDB 的组合方式千千万万，用不着一谈 GDB 就觉得只有原始的敲命令一种用法，对吧？上面么多用法，随便选两样，花不了半小时，即可让你终端下的调试工作加快不少。</p><blockquote><p><strong>来自：知乎，作者：韦易笑</strong></p><p><strong>链接：<a href="https://zhuanlan.zhihu.com/p/32843449">https://zhuanlan.zhihu.com/p/32843449</a></strong></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>cpp</tag>
      
      <tag>Linux</tag>
      
      <tag>收藏文章</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>排序算法总结</title>
    <link href="/2023/02/18/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <url>/2023/02/18/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/test.jpg" alt="test import img"></p><p><img src="/img/test/test2.jpg" alt="test import img 2"></p>]]></content>
    
    
    
    <tags>
      
      <tag>剑指offer</tag>
      
      <tag>算法刷题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前缀树和贪心算法</title>
    <link href="/2023/02/17/%E5%89%8D%E7%BC%80%E5%9B%BE%E5%92%8C%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    <url>/2023/02/17/%E5%89%8D%E7%BC%80%E5%9B%BE%E5%92%8C%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="前缀树"><a href="#前缀树" class="headerlink" title="前缀树"></a>前缀树</h2><p>前缀树节点数据结构：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TrieNode</span>()&#123;<br><span class="hljs-type">int</span> pass;<span class="hljs-comment">//经过某节点的次数</span><br><span class="hljs-type">int</span> end;<span class="hljs-comment">//是否是字符串结尾字符</span><br>vector&lt;TrieNode*&gt; next;<span class="hljs-comment">//当字符数比较多(超过26个)可以考虑使用哈希表存储(避免浪费空间)</span><br>&#125;<br></code></pre></td></tr></table></figure><p>前缀树建立好后不但可以快速查询到字符串出现次数，还可以查询到某个前缀出现次数。 </p><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><h2 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h2><p>不从整体最优上考虑，所做出的是在一定条件下的局部最优解。</p><h3 id="模板-1"><a href="#模板-1" class="headerlink" title="模板"></a>模板</h3>]]></content>
    
    
    
    <tags>
      
      <tag>剑指offer</tag>
      
      <tag>算法刷题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前缀和+哈希map优化</title>
    <link href="/2023/02/15/%E5%89%8D%E7%BC%80%E5%92%8C+%E5%93%88%E5%B8%8Cmap%E4%BC%98%E5%8C%96/"/>
    <url>/2023/02/15/%E5%89%8D%E7%BC%80%E5%92%8C+%E5%93%88%E5%B8%8Cmap%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="前缀和-哈希map优化"><a href="#前缀和-哈希map优化" class="headerlink" title="前缀和+哈希map优化"></a>前缀和+哈希map优化</h1><p>[剑指offer专项突击第十题](<a href="https://leetcode.cn/problems/QTMn0o/?favorite=e8X3pBZi">剑指 Offer II 010. 和为 k 的子数组 - 力扣（Leetcode）</a>)</p><h2 id="和为k的子数组"><a href="#和为k的子数组" class="headerlink" title="和为k的子数组"></a>和为k的子数组</h2><h3 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h3><p>给定一个整数数组和一个整数 <code>k</code> <strong>，</strong>请找到该数组中和为 <code>k</code> 的连续子数组的个数。</p><p><strong>示例 1：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入:nums = <span class="hljs-comment">[1,1,1]</span>, k = 2<br>输出: 2<br>解释: 此题 <span class="hljs-comment">[1,1]</span> 与 <span class="hljs-comment">[1,1]</span> 为两种不同的情况<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入:nums = [1,2,3], k = 3</span><br><span class="hljs-section">输出: 2</span><br></code></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>很容易想到暴力解法：遍历所有子数组（时间复杂度为O(n * n)）并计算每个子数组的和(时间复杂度为O(n)),可见暴力解法的时间复杂度为O(n * n * n)</p><p>如何用空间换时间改进暴力解法呢：</p><p>​       可以引入哈希表，先遍历一遍数组，将从数组第一个元素累加到当前元素之和(记为变量sum)存到键(key)中，值(value)为累加和sum出现的次数。假设数组前i个数字之和为x，若存在数组的前j（0&lt;j&lt;i）个数字之和为x-k，则数组[j,i]就是我们要找的目标子数组。</p><p>​      设置sum、count和hashmap三个变量。从头遍历一次数组，对数组中的每个元素执行以下操作：</p><ol><li>更新累计值sum</li><li>查找哈希表中是否存在sum - k的键</li><li>hashmap[sum - k]记录了满足条件子数组的数量，将值添加到count上（c++中哈希表默认值为0）</li><li>更新哈希表，hashmap[sum]++</li></ol><p>​      注意哈希表创建时要设置map[0] &#x3D; 1，如果有一个从数组第一个元素开始组成的子数组前缀和正好是第一个等于k 的情况， 不加map[0] &#x3D; 1,就会遗漏+1 的操作。</p><p>前缀和+哈希map优化解法的时间复杂度为O(n)!!!</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">subarraySum</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>        unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; hashmap;<br>        hashmap.<span class="hljs-built_in">insert</span>(&#123; <span class="hljs-number">0</span>, <span class="hljs-number">1</span> &#125;);<br>        <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;x:nums) &#123;<br>            sum += x;<br>            <span class="hljs-keyword">if</span> (hashmap.<span class="hljs-built_in">find</span>(sum - k) != hashmap.<span class="hljs-built_in">end</span>()) &#123;<br>                <span class="hljs-comment">//hashmap.end()指向unordered_map容器中容器中最后一个元素之后的位置</span><br>                count += hashmap[sum - k];<br>            &#125;<br>            hashmap[sum]++;<span class="hljs-comment">//构建哈希表</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id><a href="#" class="headerlink" title></a></h2><h2 id="向下的路径节点之和"><a href="#向下的路径节点之和" class="headerlink" title="向下的路径节点之和"></a>向下的路径节点之和</h2><p><a href="https://leetcode.cn/problems/6eUYwP/description/">剑指 Offer II 050. 向下的路径节点之和 - 力扣（Leetcode）</a></p><h3 id="题意：-1"><a href="#题意：-1" class="headerlink" title="题意："></a>题意：</h3><p>给定一个二叉树的根节点 <code>root</code> ，和一个整数 <code>targetSum</code> ，求该二叉树里节点值之和等于 <code>targetSum</code> 的 <strong>路径</strong> 的数目。</p><p><strong>路径</strong> 不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/04/09/pathsum3-1-tree.jpg" alt="img"></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">root</span> = [<span class="hljs-number">10</span>,<span class="hljs-number">5</span>,-<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">11</span>,<span class="hljs-number">3</span>,-<span class="hljs-number">2</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">1</span>], <span class="hljs-attr">targetSum</span> = <span class="hljs-number">8</span><br>输出：<span class="hljs-number">3</span><br>解释：和等于 <span class="hljs-number">8</span> 的路径有 <span class="hljs-number">3</span> 条，如图所示。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">root</span> = [<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">8</span>,<span class="hljs-number">11</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">13</span>,<span class="hljs-number">4</span>,<span class="hljs-number">7</span>,<span class="hljs-number">2</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>], <span class="hljs-attr">targetSum</span> = <span class="hljs-number">22</span><br>输出：<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="分析：-1"><a href="#分析：-1" class="headerlink" title="分析："></a>分析：</h3><p>可以使用暴力解，遍历所有可能存在的路径,首先从根节点遍历所有节点(O(n))，对于每个节点寻找以该节点为根节点的所有路径,对每一个路径求和并判断是否等于targetSum(时间复杂度为O(n)) 共计时间复杂度是n的平方级。</p><p>也可以使用前缀和+哈希map优化：</p><ol><li>更新当前的 sum 值</li><li>从哈希表中找到当前路径符合要求的个数并累加到全局变量res上 res +&#x3D; mp[k];</li><li>将当前的路径和存入哈希表 mp[sum]++;</li><li>调用递归函数计算左右子树的符合要求的路径数 </li><li>离开当前字节点时更新哈希表去除记录当前的 sum(当前子节点已经不在访问路径中了)   mp[sum]–;</li></ol><p>需要注意的是新增的第127个测试用例数组过大，应使用long long类型数据</p><h3 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h3><p>暴力解法:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pathSum</span><span class="hljs-params">(TreeNode* root, <span class="hljs-type">long</span> <span class="hljs-type">long</span> targetSum)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(root==<span class="hljs-literal">nullptr</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> result=<span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//对于二叉树的每个节点，都执行一次dfs函数</span><br>        result+=<span class="hljs-built_in">dfs</span>(root,targetSum);<br>        <span class="hljs-comment">//遍历二叉树的每个节点</span><br>        result+=<span class="hljs-built_in">pathSum</span>(root-&gt;left,targetSum);<br>        result+=<span class="hljs-built_in">pathSum</span>(root-&gt;right,targetSum);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-comment">//遍历从某节点出发的所有路径</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(TreeNode* node,<span class="hljs-type">long</span> <span class="hljs-type">long</span> targetSum)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(node==<span class="hljs-literal">nullptr</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> result=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(targetSum==node-&gt;val)&#123;<br>            result++;<br>        &#125;<br>        result+=<span class="hljs-built_in">dfs</span>(node-&gt;left,targetSum-node-&gt;val);<br>        result+=<span class="hljs-built_in">dfs</span>(node-&gt;right,targetSum-node-&gt;val);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>优化解法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    unordered_map&lt;<span class="hljs-type">long</span> <span class="hljs-type">long</span>, <span class="hljs-type">int</span>&gt; r = &#123;&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;&#125;;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pathSum</span><span class="hljs-params">(TreeNode* root, <span class="hljs-type">int</span> targetSum)</span> </span>&#123;<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> _sum = <span class="hljs-number">0</span>;<br>        _dfs(root, _sum, targetSum);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-type">void</span> _dfs(TreeNode* root, <span class="hljs-type">long</span> <span class="hljs-type">long</span> cur_sum, <span class="hljs-type">int</span> targetSum) &#123;<br>        <span class="hljs-keyword">if</span> (!root) <span class="hljs-keyword">return</span>;<br>        cur_sum += root-&gt;val;<br>        <span class="hljs-keyword">if</span> (r.<span class="hljs-built_in">find</span>(cur_sum - targetSum) != r.<span class="hljs-built_in">end</span>()) res += r[cur_sum - targetSum];<br>        ++r[cur_sum];<br>        _dfs(root-&gt;left, cur_sum, targetSum);<br>        _dfs(root-&gt;right, cur_sum, targetSum);<br>        --r[cur_sum];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>剑指offer</tag>
      
      <tag>算法刷题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CPP面试准备路线</title>
    <link href="/2023/01/27/c++%E9%9D%A2%E8%AF%95%E4%B8%80%E6%9D%A1%E9%BE%99/"/>
    <url>/2023/01/27/c++%E9%9D%A2%E8%AF%95%E4%B8%80%E6%9D%A1%E9%BE%99/</url>
    
    <content type="html"><![CDATA[<h1 id="C-面试面试一条龙"><a href="#C-面试面试一条龙" class="headerlink" title="C++面试面试一条龙"></a>C++面试面试一条龙</h1><h2 id="面试题的学习（八股文）"><a href="#面试题的学习（八股文）" class="headerlink" title="面试题的学习（八股文）"></a>面试题的学习（八股文）</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/e30408603615b34936eafe5c83c54cbd.png" alt="image-20230118230253817"></p><p><a href="https://interviewguide.cn/notes/03-hunting_job/02-interview/01-01-01-basic.html">基础语法-01-20 | 阿秀的学习笔记 (interviewguide.cn)</a></p><p><img src="https://img-blog.csdnimg.cn/img_convert/890f297f6b75ec4a70f806b0835db378.png" alt="image-20230118230320128"></p><p><a href="https://www.nowcoder.com/issue/tutorial?tutorialId=10069&uuid=cbbd53166e7240dba9ced2b3c03d89b8">编程入门教程_名企面试真题面经_牛客网_牛客网 (nowcoder.com)</a></p><p><img src="https://img-blog.csdnimg.cn/img_convert/2b59f822c20b33dc272c50ca58ba9ac5.png" alt="image-20230118230523542"></p><p><a href="https://leetcode.cn/problem-list/e8X3pBZi/">剑指 Offer（专项突击版） - 力扣（LeetCode）</a></p><h2 id="计算机系统和计算机网络视频学习"><a href="#计算机系统和计算机网络视频学习" class="headerlink" title="计算机系统和计算机网络视频学习"></a>计算机系统和计算机网络视频学习</h2><p>准备面试用：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/fe27e223285aefd97d46f26fe7b5a385.png" alt="image-20230118230617949"></p><p><a href="https://www.bilibili.com/video/BV1kS4y1H7RE/?spm_id_from=333.999.0.0">【知识分享】重学操作系统_哔哩哔哩_bilibili</a></p><p><img src="https://img-blog.csdnimg.cn/img_convert/b90dfa5cbecb39c42c44b780849b98a0.png" alt="image-20230118230755745"></p><p>[操作系统概述 (为什么要学操作系统) <a href="https://www.bilibili.com/video/BV1Cm4y1d7Ur/?spm_id_from=333.788.recommend_more_video.22&vd_source=96dd2539b156b0809378103a5f27b949">南京大学2022操作系统-蒋炎岩-P1]_哔哩哔哩_bilibili</a></p><h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/597968a4286f86fa665faf461737709c.png" alt="image-20230118230905251"></p><p><a href="https://www.bilibili.com/video/BV1B34y1e7kU?p=2&vd_source=fde5e3ce1aff0d59f6c27d0fe2ca5a70">开篇词 一次搞定计算机网络，高效修炼程序员内功_哔哩哔哩_bilibili</a></p><p><img src="https://img-blog.csdnimg.cn/img_convert/a3e2fb64e40bb94434859bc01c3e3553.png" alt="image-20230118230931119"></p><p><a href="https://www.bilibili.com/video/BV1JV411t7ow/?spm_id_from=333.999.0.0&vd_source=96dd2539b156b0809378103a5f27b949">中科大郑烇、杨坚全套《计算机网络（自顶向下方法 第7版，James F.Kurose，Keith W.Ross）》课程_哔哩哔哩_bilibili</a></p><h2 id="项目准备"><a href="#项目准备" class="headerlink" title="项目准备"></a>项目准备</h2><h3 id="书籍推荐"><a href="#书籍推荐" class="headerlink" title="书籍推荐"></a>书籍推荐</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/6aeb8b084c128191870b653123f26fef.png" alt="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3bbabd5111ff48fb934e78606b6e719d~tplv-k3u1fbpfcp-watermark.image?"></p><p><a href="https://book.douban.com/subject/24722611/">入门+浅浅实战</a></p><p><img src="https://img-blog.csdnimg.cn/img_convert/fb2ab01af453d680c5d04f111dd4a336.png" alt="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8199c5dc01df469784ab5e9507e83530~tplv-k3u1fbpfcp-watermark.image?"></p><p><a href="https://book.douban.com/subject/20471211/">深入实战</a></p><h3 id="视频推荐"><a href="#视频推荐" class="headerlink" title="视频推荐"></a>视频推荐</h3><p><strong>零基础相关视频学习</strong></p><p>这个视频基本上可以平替第一本书，但是第一本书里面的系统调用讲解的更为丰富和全面，这个视频讲解的是用到最多的。</p><p><a href="https://www.nowcoder.com/study/live/504/2/25">https://www.nowcoder.com/study/live/504/2/25</a></p><p><strong>muduo网络库相关</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/9a79884da6010cccf8e2451b1cf4a187.png" alt="image-20230118231256366"></p><p><a href="https://www.bilibili.com/video/BV1nu411Q7Gq?spm_id_from=333.1007.top_right_bar_window_history.content.click&vd_source=96dd2539b156b0809378103a5f27b949">https://www.bilibili.com/video/BV1nu411Q7Gq?spm_id_from=333.1007.top_right_bar_window_history.content.click&amp;vd_source=96dd2539b156b0809378103a5f27b949</a></p><p><img src="https://img-blog.csdnimg.cn/img_convert/cda515037ab8532b2d4cf0f210a2d364.png" alt="image-20230118231246164"></p><p>0809378103a5f27b949</p><p>[外链图片转存中…(img-l7Fu64To-1674823122972)]</p><p><a href="https://www.bilibili.com/video/BV11B4y1b7kG?spm_id_from=333.337.search-card.all.click&vd_source=96dd2539b156b0809378103a5f27b949">https://www.bilibili.com/video/BV11B4y1b7kG?spm_id_from=333.337.search-card.all.click&amp;vd_source=96dd2539b156b0809378103a5f27b949</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>cpp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>青训营项目部署过程</title>
    <link href="/2023/01/27/%E9%9D%92%E8%AE%AD%E8%90%A5%E5%A4%A7%E4%BD%9C%E4%B8%9A%E9%83%A8%E7%BD%B2%E8%BF%87%E7%A8%8B/"/>
    <url>/2023/01/27/%E9%9D%92%E8%AE%AD%E8%90%A5%E5%A4%A7%E4%BD%9C%E4%B8%9A%E9%83%A8%E7%BD%B2%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="1-交叉编译"><a href="#1-交叉编译" class="headerlink" title="1.交叉编译"></a>1.交叉编译</h2><p>在windows平台对项目进行交叉编译 ，得到linux系统的可执行文件</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">SET</span> CGO_ENABLED=0<br><span class="hljs-keyword">set</span> <span class="hljs-comment">GOARCH=amd64</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">GOOS=linux</span><br><br><span class="hljs-comment">// 开始编译</span><br>go <span class="hljs-comment">build main.go</span><br></code></pre></td></tr></table></figure><p>使用go env指令可以查看是否配置成功：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/2a4ae42f5067c39f60efad0739709351.png" alt="sm图床"></p><p>将编译得到的main文件通过ftp发送给服务器，由于项目中将视频等静态资源存放到相对路径为.&#x2F;public的地方 我们需要新建一个public文件夹：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/8d9973191e11ad5f52dd78e8f7b84273.png" alt="image-20230208150340717"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/2dfc0b4ee69812d5da8ff209aca78ba8.png" alt="image-20230208150420127"></p><p>main文件没有可执行权限，需要手动添加：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/0bacbd57ced385577d0d95e2065ef43d.png" alt="image-20230208150801126"></p><h2 id="2-配置数据库"><a href="#2-配置数据库" class="headerlink" title="2.配置数据库"></a>2.配置数据库</h2><h3 id="修改初始密码"><a href="#修改初始密码" class="headerlink" title="修改初始密码"></a>修改初始密码</h3><p>云服务器安装完mysql后有一个默认的用户root，但是root的密码我不知道，要先获取root的密码：</p><ol><li>首先关闭数据库服务</li></ol><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">service mysqld stop<br></code></pre></td></tr></table></figure><ol start="2"><li>修改my.cnf文件</li></ol><p>执行<code>vim /etc/my.cnf</code></p><p>在mysqld下添加</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">[mysqld]<br><span class="hljs-keyword">skip</span><span class="hljs-operator">-</span><span class="hljs-keyword">grant</span><span class="hljs-operator">-</span>tables<br></code></pre></td></tr></table></figure><ol start="3"><li>重启数据库</li></ol><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">service mysqld <span class="hljs-literal">start</span><br></code></pre></td></tr></table></figure><ol start="4"><li>刷新权限 (这里刷新以防报错，以踩坑！！)</li></ol><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">flush privileges<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><ol start="5"><li>进入mysql</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mysql -uroot -p<span class="hljs-regexp">//</span>可以免密登录<br></code></pre></td></tr></table></figure><ol start="6"><li>执行</li></ol><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">use mysql<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><ol start="7"><li>修改密码</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">set</span> <span class="hljs-keyword">password</span> <span class="hljs-keyword">for</span> root@localhost = <span class="hljs-keyword">password</span>(<span class="hljs-string">&#x27;your_password&#x27;</span>);<br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ol start="8"><li>刷新权限表</li></ol><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">flush privileges<span class="hljs-comment">;</span><br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ol start="9"><li>退出</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">quit;<span class="hljs-regexp">//</span>获取按下ctrl+c退出<br></code></pre></td></tr></table></figure><ol start="10"><li>删除 skip-grant-tables<br>先关闭服务</li></ol><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">service mysqld stop<br></code></pre></td></tr></table></figure><p>执行vim &#x2F;etc&#x2F;my.cnf进入my.cnf文件<br>再删除下列这行代码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">skip</span><span class="hljs-operator">-</span><span class="hljs-keyword">grant</span><span class="hljs-operator">-</span>tables<br></code></pre></td></tr></table></figure><p>重启mysql</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">service mysqld <span class="hljs-literal">start</span><br></code></pre></td></tr></table></figure><h3 id="修改config文件"><a href="#修改config文件" class="headerlink" title="修改config文件"></a>修改config文件</h3><p>在config.toml文件中修改mysql server等配置信息，并将config文件夹发送到服务器</p><h3 id="创建dousheng数据库并导入sql文件"><a href="#创建dousheng数据库并导入sql文件" class="headerlink" title="创建dousheng数据库并导入sql文件"></a>创建dousheng数据库并导入sql文件</h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gauss">mysql -uroot -p123456<span class="hljs-comment">//登录mysql</span><br><span class="hljs-keyword">create</span> database dousheng<span class="hljs-comment">//创建dousheng数据库</span><br><span class="hljs-keyword">use</span> dousheng<br>source /root/dousheng/dousheng.sql<span class="hljs-comment">//导入sql文件创建表单</span><br><span class="hljs-keyword">show</span> tables;<span class="hljs-comment">//查看dousheng数据库中的表单</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/a1b71865a5ac15469b2672794c19d14f.png" alt="image-20230208160804807"></p><p>接下来可以运行main文件，可以直接.&#x2F;main运行文件，但是这样运行起来的程序会在当前对话窗关闭时自动断开，所以需要将程序运行在后台。使用到了nohup指令，英文全称 no hang up（不挂起）。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs 1c">nohup ./main <span class="hljs-meta">&amp;<span class="hljs-comment">//在后台运行程序</span></span><br><br>netstat -lntp<span class="hljs-comment">//查看后台运行的进程</span><br><br>kill <span class="hljs-number">28166</span>（进程号）<span class="hljs-comment">//关闭后台进程</span><br><br></code></pre></td></tr></table></figure><p>&#x2F;root&#x2F;ffmpeg&#x2F;ffmpeg-git-20220910-amd64-static</p><h2 id="3-在后台运行程序"><a href="#3-在后台运行程序" class="headerlink" title="3.在后台运行程序"></a>3.在后台运行程序</h2><p>in &amp;&#x2F;&#x2F;在后台运行程序</p><p>netstat -lntp&#x2F;&#x2F;查看后台运行的进程</p><p>kill 28166（进程号）&#x2F;&#x2F;关闭后台进程</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-regexp">/root/</span>ffmpeg/ffmpeg-git-<span class="hljs-number">20220910</span>-amd64-<span class="hljs-keyword">static</span><br></code></pre></td></tr></table></figure><h2 id="3-安装ffmpeg"><a href="#3-安装ffmpeg" class="headerlink" title="3.安装ffmpeg"></a>3.安装ffmpeg</h2><p><a href="https://blog.csdn.net/wangyongpro/article/details/104036835">linux 安装ffmpeg（超简单，只需两步）_wangyongpro的博客-CSDN博客</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>青训营</tag>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>青训营项目1</title>
    <link href="/2023/01/27/%E9%9D%92%E8%AE%AD%E8%90%A5%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%981/"/>
    <url>/2023/01/27/%E9%9D%92%E8%AE%AD%E8%90%A5%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%981/</url>
    
    <content type="html"><![CDATA[<h1 id="项目实战"><a href="#项目实战" class="headerlink" title="项目实战"></a>项目实战</h1><p>实现掘金青训营报名页码的后端部分</p><p><img src="https://img-blog.csdnimg.cn/img_convert/9f5a94967bddf4ced84dc4c4ac424366.png" alt="image-20230126130343565"></p><h2 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h2><ul><li><input checked disabled type="checkbox"> 展示话题（标题、文字描述）和回帖列表</li><li><input checked disabled type="checkbox"> 不考虑前端页面实现，仅实现一个本地web服务</li><li><input checked disabled type="checkbox"> 话题和回帖数据用文件存储</li></ul><p>附加要求：</p><ul><li><input disabled type="checkbox"> 支持发布帖子</li><li><input disabled type="checkbox"> 本地id生成要保证不重复</li><li><input disabled type="checkbox"> append文件 更新索引要注意Map的并发安全问题</li></ul><h2 id="项目概述"><a href="#项目概述" class="headerlink" title="项目概述"></a>项目概述</h2><p>示例图如下：</p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ec319dffe6ae49ad977a8d6a092c7d42~tplv-k3u1fbpfcp-watermark.image?" alt="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ec319dffe6ae49ad977a8d6a092c7d42~tplv-k3u1fbpfcp-watermark.image?" style="zoom:50%;"><p>项目分层结构如下：</p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d578dcdb48674044a09f6144daa380af~tplv-k3u1fbpfcp-watermark.image?" alt="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d578dcdb48674044a09f6144daa380af~tplv-k3u1fbpfcp-watermark.image?" style="zoom:50%;"><ul><li>数据层：Repository <strong>直接同数据库或数据存储文件打交道</strong>，该部分需要对数据做初步的反序列化（将以二进制形式存储的数据转换为对象）并封装对数据的增删改查操作</li><li>逻辑层： Service 处理<strong>核心业务的逻辑输出</strong>，接收Repository层的数据并进行打包封装</li><li>视图层：Controller 处理和外部的交互逻辑，将经过上两层处理的数据<strong>以客户端需要的格式发送</strong></li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="Repository部分："><a href="#Repository部分：" class="headerlink" title="Repository部分："></a>Repository部分：</h3><p>首先使用map数据结构定义索引（按值查找，感觉像是一个哈希表），<strong>仅展示部分关键代码</strong>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//使用索引数据结构提高查询速度</span><br><span class="hljs-keyword">var</span> (<br>topicIndexMap <span class="hljs-keyword">map</span>[<span class="hljs-type">int64</span>]*Topic<br>postIndexMap  <span class="hljs-keyword">map</span>[<span class="hljs-type">int64</span>][]*Post<br>)<br><span class="hljs-comment">//将在磁盘中存储的数据映射到内存中的Map</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">initTopicIndexMap</span><span class="hljs-params">(filePath <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">error</span> &#123;<br>open, err := os.Open(filePath + <span class="hljs-string">&quot;topic&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br>scanner := bufio.NewScanner(open)<br>topicTmpMap := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">int64</span>]*Topic)<br><span class="hljs-keyword">for</span> scanner.Scan() &#123;<br>text := scanner.Text()<br><span class="hljs-keyword">var</span> topic Topic<br><span class="hljs-keyword">if</span> err := json.Unmarshal([]<span class="hljs-type">byte</span>(text), &amp;topic); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br>topicTmpMap[topic.Id] = &amp;topic<br>&#125;<br>topicIndexMap = topicTmpMap<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>接着实现查询操作</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Topic <span class="hljs-keyword">struct</span> &#123;<br>Id         <span class="hljs-type">int64</span>  <span class="hljs-string">`json:&quot;id&quot;`</span><br>Title      <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;title&quot;`</span><br>Content    <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;content&quot;`</span><br>CreateTime <span class="hljs-type">int64</span>  <span class="hljs-string">`json:&quot;create_time&quot;`</span><br>&#125;<br><span class="hljs-comment">//TopicDao没有实际效果，可能是类似c++中的命名空间，用来防止函数重名</span><br><span class="hljs-keyword">type</span> TopicDao <span class="hljs-keyword">struct</span> &#123;<br>&#125;<br><span class="hljs-keyword">var</span> (<br>topicDao  *TopicDao<br>topicOnce sync.Once<br>)<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewTopicDaoInstance</span><span class="hljs-params">()</span></span> *TopicDao &#123;<br>topicOnce.Do(<br><span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>topicDao = &amp;TopicDao&#123;&#125;<br>&#125;)<br><span class="hljs-keyword">return</span> topicDao<br>&#125;<br><span class="hljs-comment">//查询操作，直接按值查找</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(*TopicDao)</span></span> QueryTopicById(id <span class="hljs-type">int64</span>) *Topic &#123;<br><span class="hljs-keyword">return</span> topicIndexMap[id]<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Service部分"><a href="#Service部分" class="headerlink" title="Service部分"></a>Service部分</h3><p>实体：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> PageInfo <span class="hljs-keyword">struct</span> &#123;<br>Topic    *repository.Topic<br>PostList []*repository.Post<br>&#125;<br></code></pre></td></tr></table></figure><p>Service部分要执行的操作如下：</p><pre><code class=" mermaid">graph LR;  参数校验--&gt;准备数据  准备数据--&gt;组装实体</code></pre><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(f *QueryPageInfoFlow)</span></span> Do() (*PageInfo, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-comment">//参数校验</span><br><span class="hljs-keyword">if</span> err := f.checkParam(); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-comment">//准备数据</span><br><span class="hljs-keyword">if</span> err := f.prepareInfo(); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-comment">//组装实体</span><br><span class="hljs-keyword">if</span> err := f.packPageInfo(); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-keyword">return</span> f.pageInfo, <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(f *QueryPageInfoFlow)</span></span> checkParam() <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">if</span> f.topicId &lt;= <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> errors.New(<span class="hljs-string">&quot;topic id must be larger than 0&quot;</span>)<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(f *QueryPageInfoFlow)</span></span> prepareInfo() <span class="hljs-type">error</span> &#123;<br><span class="hljs-comment">//获取topic信息</span><br><span class="hljs-keyword">var</span> wg sync.WaitGroup<br>wg.Add(<span class="hljs-number">2</span>)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">defer</span> wg.Done()<br>topic := repository.NewTopicDaoInstance().QueryTopicById(f.topicId)<br>f.topic = topic<br>&#125;()<br><span class="hljs-comment">//获取post列表</span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">defer</span> wg.Done()<br>posts := repository.NewPostDaoInstance().QueryPostsByParentId(f.topicId)<br>f.posts = posts<br>&#125;()<br>wg.Wait() <span class="hljs-comment">//等待信息从repository层返回</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(f *QueryPageInfoFlow)</span></span> packPageInfo() <span class="hljs-type">error</span> &#123;<br>f.pageInfo = &amp;PageInfo&#123;<br>Topic:    f.topic,<br>PostList: f.posts,<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Controller部分"><a href="#Controller部分" class="headerlink" title="Controller部分"></a>Controller部分</h2><p>定义返回的数据格式</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> PageData <span class="hljs-keyword">struct</span> &#123;<br>Code <span class="hljs-type">int64</span>       <span class="hljs-string">`json:&quot;code&quot;`</span><br>Msg  <span class="hljs-type">string</span>      <span class="hljs-string">`json:&quot;msg&quot;`</span><br>Data <span class="hljs-keyword">interface</span>&#123;&#125; <span class="hljs-string">`json:&quot;data&quot;`</span><br>&#125;<br></code></pre></td></tr></table></figure><p>定义QueryPageInfo方法，根据topicId获取返回的数据</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">QueryPageInfo</span><span class="hljs-params">(topicIdStr <span class="hljs-type">string</span>)</span></span> *PageData &#123;<br>topicId, err := strconv.ParseInt(topicIdStr, <span class="hljs-number">10</span>, <span class="hljs-number">64</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> &amp;PageData&#123;<br>Code: <span class="hljs-number">-1</span>,<br>Msg:  err.Error(),<br>&#125;<br>&#125;<br>    <span class="hljs-comment">//调用service层方法获得数据</span><br>pageInfo, err := service.QueryPageInfo(topicId)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> &amp;PageData&#123;<br>Code: <span class="hljs-number">-1</span>,<br>Msg:  err.Error(),<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> &amp;PageData&#123;<br>Code: <span class="hljs-number">0</span>,<br>Msg:  <span class="hljs-string">&quot;success&quot;</span>,<br>Data: pageInfo,<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Router部分"><a href="#Router部分" class="headerlink" title="Router部分"></a>Router部分</h2><p>该部分主要实现以下操作：</p><ol><li>初始化数据索引</li><li>初始化引擎配置</li><li>构建路由</li><li>启动服务</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//初始化数据索引</span><br><span class="hljs-keyword">if</span> err := Init(<span class="hljs-string">&quot;./data/&quot;</span>); err != <span class="hljs-literal">nil</span> &#123;<br>os.Exit(<span class="hljs-number">-1</span>)<br>&#125;<br><span class="hljs-comment">//初始化引擎配置</span><br>r := gin.Default()<br><span class="hljs-comment">//构建路由</span><br>r.GET(<span class="hljs-string">&quot;/community/page/get/:id&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>topicId := c.Param(<span class="hljs-string">&quot;id&quot;</span>)<br>topicId = strings.TrimLeft(topicId, <span class="hljs-string">&quot;:,&quot;</span>)<br><span class="hljs-built_in">println</span>(topicId)<br>data := cotroller.QueryPageInfo(topicId)<br>c.JSON(<span class="hljs-number">200</span>, data)<br>&#125;)<br><span class="hljs-comment">//启动服务</span><br>err := r.Run()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用postman测试接口：<a href="http://localhost:8080/community/page/get/:2">http://localhost:8080/community/page/get/:2</a></p><p>返回的json数据如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;success&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;Topic&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;青训营来啦!&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;content&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;小哥哥，快到碗里来~&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;create_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1650437640</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;PostList&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">6</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;parent_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;content&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;小哥哥快来1&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;create_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1650437621</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">7</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;parent_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;content&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;小哥哥快来2&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;create_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1650437622</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">8</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;parent_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;content&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;小哥哥快来3&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;create_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1650437623</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">9</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;parent_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;content&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;小哥哥快来4&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;create_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1650437624</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;parent_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;content&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;小哥哥快来5&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;create_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1650437625</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>golang</tag>
      
      <tag>后端开发，青训营</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
